// Generated by CoffeeScript 1.6.3
var missingConfig;

missingConfig = require('../notice/errors').missingConfig;

module.exports.authenticator = function(config) {
  var authentic, decodeAuth, requestAuth;
  if (config == null) {
    config = {};
  }
  authentic = (function() {
    try {
      return config.manager.authenticate;
    } catch (_error) {}
  })();
  if (authentic == null) {
    throw missingConfig('config.manager.authenticate', 'manager');
  }
  requestAuth = function(response) {
    response.writeHead(401, {
      'www-authenticate': 'BASIC'
    });
    return response.end();
  };
  decodeAuth = function(authorization, response) {
    var decoded, error, input, password, type, username, _ref, _ref1;
    try {
      _ref = authorization.split(' '), type = _ref[0], authorization = _ref[1];
      if (type !== 'Basic') {
        return requestAuth(response);
      }
      decoded = new Buffer(authorization, 'base64').toString('utf8');
      _ref1 = decoded.match(/(.*):(.*)/), input = _ref1[0], username = _ref1[1], password = _ref1[2];
      return {
        username: username,
        password: password
      };
    } catch (_error) {
      error = _error;
      return requestAuth(response);
    }
  };
  return function(requestHandler) {
    return function(request, response) {
      var authenticEntity, authorization, key, password, username, _ref;
      try {
        authorization = request.headers.authorization;
      } catch (_error) {}
      if (authorization == null) {
        return requestAuth(response);
      }
      if (!(_ref = decodeAuth(authorization, response), username = _ref.username, password = _ref.password, _ref)) {
        return;
      }
      if (typeof authentic === 'function') {
        return authentic(username, password, function(error, authenticEntity) {
          if (authenticEntity != null) {
            return requestHandler(authenticEntity, request, response);
          }
          return requestAuth(response);
        });
      }
      if (username === authentic.username && password === authentic.password) {
        authenticEntity = {};
        for (key in authentic) {
          if (key === 'password') {
            continue;
          }
          authenticEntity[key] = authentic[key];
        }
        return requestHandler(authenticEntity, request, response);
      }
      return requestAuth(response);
    };
  };
};
