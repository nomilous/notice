// Generated by CoffeeScript 1.6.3
var argumentException, testable, undefinedException, _ref;

_ref = require('../notice/errors'), argumentException = _ref.argumentException, undefinedException = _ref.undefinedException;

testable = void 0;

module.exports._middleware = function() {
  return testable;
};

module.exports.middleware = function(config) {
  var api, local;
  if (config == null) {
    config = {};
  }
  testable = local = {
    slots: {},
    bottomSlot: 0,
    array1: [],
    array2: [],
    active: 'array2',
    firstMiddleware: function(next) {
      return next();
      /* PENDING*/

    },
    lastMiddleware: function(next) {
      return next();
      /* PENDING*/

    },
    first: function(fn) {
      if (typeof fn !== 'function') {
        return;
      }
      if (!local.firstMiddleware.toString().match(/PENDING/)) {
        return;
      }
      local.firstMiddleware = fn;
      return local.reload();
    },
    last: function(fn) {
      if (typeof fn !== 'function') {
        return;
      }
      if (!local.lastMiddleware.toString().match(/PENDING/)) {
        return;
      }
      local.lastMiddleware = fn;
      return local.reload();
    },
    nextSlot: function() {
      return ++local.bottomSlot;
    },
    create: function(_arg) {
      var description, enabled, fn, slot, title;
      slot = _arg.slot, title = _arg.title, description = _arg.description, enabled = _arg.enabled, fn = _arg.fn;
      if (slot == null) {
        slot = local.nextSlot();
      }
      if (typeof slot !== 'number') {
        throw argumentException('opts.slot', 'notice.use(opts, fn)', 'as whole number');
      }
      if (Math.floor(slot) !== slot) {
        throw argumentException('opts.slot', 'notice.use(opts, fn)', 'as whole number');
      }
      if (!(slot > 0)) {
        throw argumentException('opts.slot', 'notice.use(opts, fn)', 'as positive number');
      }
      if (!((title != null) && (fn != null))) {
        throw argumentException('opts.title and fn', 'notice.use(opts, fn)');
      }
      if (typeof fn !== 'function') {
        throw argumentException('fn', 'notice.use(opts, fn)', 'as function');
      }
      if (slot > local.bottomSlot) {
        local.bottomSlot = slot + 1;
      }
      local.slots[slot] = {
        slot: slot,
        title: title,
        description: description,
        type: 'usr',
        enabled: enabled,
        fn: fn
      };
      return local.reload();
    },
    update: function(_arg) {
      var description, enabled, existing, fn, slot, title;
      slot = _arg.slot, title = _arg.title, description = _arg.description, enabled = _arg.enabled, fn = _arg.fn;
      try {
        slot = parseInt(slot);
      } catch (_error) {}
      if (typeof slot !== 'number') {
        throw argumentException('opts.slot', 'notice.use(opts, fn)', 'as whole number');
      }
      if (local.slots[slot] == null) {
        throw undefinedException('opts.slot', 'notice.use(opts, fn)', 'to refer to already existing slot');
      }
      existing = local.slots[slot];
      existing.title = title || existing.title;
      existing.description = description || existing.description;
      existing.enabled = enabled != null ? enabled : existing.enabled;
      existing.fn = fn || existing.fn;
      return local.reload();
    },
    reload: function() {
      var array, mware, next, num, slot, sort, _i, _len;
      next = local.active === 'array1' ? 'array2' : 'array1';
      sort = [];
      for (slot in local.slots) {
        sort[parseInt(slot)] = slot;
      }
      array = local[next];
      array.length = 0;
      array.push({
        title: 'first',
        type: 'sys',
        enabled: true,
        fn: local.firstMiddleware
      });
      for (_i = 0, _len = sort.length; _i < _len; _i++) {
        num = sort[_i];
        if (!num) {
          continue;
        }
        mware = local.slots[num];
        if (mware.enabled !== true) {
          continue;
        }
        array.push(mware);
      }
      array.push({
        title: 'last',
        type: 'sys',
        enabled: true,
        fn: local.lastMiddleware
      });
      return local.active = next;
    },
    running: function() {
      return local[local.active];
    },
    list: function() {
      return local.slots;
    }
  };
  local.reload();
  return api = {
    create: local.create,
    update: local.update,
    running: local.running,
    list: local.list,
    first: local.first,
    last: local.last
  };
};
