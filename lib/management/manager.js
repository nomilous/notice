// Generated by CoffeeScript 1.6.3
var authenticator, missingConfig, readFileSync, start, testable, version;

authenticator = require('./authenticator').authenticator;

missingConfig = require('../notice/errors').missingConfig;

start = require('../notice/hub/listener').start;

readFileSync = require('fs').readFileSync;

version = JSON.parse(readFileSync(__dirname + '/../../package.json', 'utf8')).version;

testable = void 0;

module.exports._manager = function() {
  return testable;
};

module.exports.manager = function(config) {
  var address, api, authenticated, listen, local, opts, port, server, transport, _ref;
  if (config == null) {
    config = {};
  }
  try {
    listen = config.manager.listen;
  } catch (_error) {}
  authenticated = authenticator(config);
  if (listen == null) {
    throw missingConfig('config.manager.listen', 'manager');
  }
  if (typeof listen.port !== 'number') {
    throw missingConfig('config.manager.listen.port', 'manager');
  }
  testable = local = {
    hubContext: void 0,
    register: function(hubContext) {
      return local.hubContext = hubContext;
    },
    respond: function(data, statusCode, response) {
      var body;
      body = JSON.stringify(data, null, 2);
      response.writeHead(statusCode, {
        'Content-Type': 'application/json',
        'Content-Length': body.length
      });
      response.write(body);
      return response.end();
    },
    routes: {
      '/about': {
        description: 'show this',
        handler: function(request, response, statusCode) {
          if (statusCode == null) {
            statusCode = 200;
          }
          return local.respond({
            module: 'notice',
            version: version,
            doc: 'https://github.com/nomilous/notice/tree/develop/spec/management',
            endpoints: local.routes
          }, statusCode, response);
        }
      },
      '/v1/hubs': {
        description: 'list present hub records',
        handler: function(request, response, statusCode) {
          var hubname, hubs;
          if (statusCode == null) {
            statusCode = 200;
          }
          hubs = {
            records: []
          };
          for (hubname in local.hubContext.hubs) {
            hubs.records.push({
              title: hubname
            });
          }
          return local.respond(hubs, statusCode, response);
        }
      }
    }
  };
  port = listen.port;
  address = listen.hostname != null ? listen.hostname : '127.0.0.1';
  opts = {};
  opts.key = listen.key;
  opts.cert = listen.cert;
  _ref = start(opts, local.requestHandler = authenticated(function(request, response) {
    var path;
    path = request.url;
    if (local.routes[path] == null) {
      return local.routes['/about'].handler(request, response, 404);
    }
    return local.routes[path].handler(request, response);
  })), server = _ref.server, transport = _ref.transport;
  server.listen(port, address, function() {
    var _ref1;
    _ref1 = server.address(), address = _ref1.address, port = _ref1.port;
    return console.log('API @ %s://%s:%s', transport, address, port);
  });
  return api = {
    register: local.register
  };
};
