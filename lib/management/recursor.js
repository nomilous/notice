// Generated by CoffeeScript 1.6.3
var recurse;

module.exports.recurse = recurse = function(object, pathArray, accum) {
  var key, nested, next;
  if (accum == null) {
    accum = {};
  }
  if (pathArray != null) {
    if (!(next = pathArray.shift())) {
      return accum;
    }
  }
  for (key in object) {
    if (next != null) {
      if (key !== next) {
        continue;
      }
    }
    nested = object[key];
    if (nested instanceof Array) {
      continue;
    }
    if (typeof nested === 'function' && (nested.$$notice != null)) {
      if (pathArray) {
        accum = nested;
        continue;
      } else {
        accum[key] = nested.$$notice;
        continue;
      }
    }
    if (typeof nested !== 'object') {
      continue;
    }
    if (pathArray != null) {
      accum = recurse(nested, pathArray, accum);
    } else {
      accum[key] = {};
      recurse(nested, null, accum[key]);
    }
  }
  return accum;
};

module.exports.recursor = function(local, type) {
  return function(_arg, request, response, statusCode) {
    var deeper, fn, notifier, result, uuid;
    uuid = _arg[0], deeper = _arg[1];
    if (statusCode == null) {
      statusCode = 200;
    }
    if (request.method !== 'GET') {
      return local.methodNotAllowed(response);
    }
    if (!local.hubContext.uuids[uuid]) {
      return local.objectNotFound(response);
    }
    notifier = local.hubContext.uuids[uuid];
    if (deeper != null) {
      fn = recurse(notifier.serialize(2)[type], deeper.split('/'));
      if (typeof fn === 'function') {
        return fn({}, function(error, result) {
          if (error != null) {
            return local.respond({
              error: error.toString()
            }, 500);
          }
          return local.respond(result, statusCode, response);
        });
      }
    } else {
      result = recurse(notifier.serialize(2)[type]);
    }
    return local.respond(result, statusCode, response);
  };
};
