// Generated by CoffeeScript 1.6.3
var Message, deferred, onceIfString, pipeline, testable, _ref;

_ref = require('also'), deferred = _ref.deferred, pipeline = _ref.pipeline;

testable = void 0;

module.exports._message = function() {
  return testable;
};

module.exports.message = function(config) {
  var local;
  if (config == null) {
    config = {};
  }
  local = {
    Message: {
      create: deferred(function(_arg, properties) {
        var after, assign, before, notify, reject, resolve;
        resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
        before = deferred(function(_arg1, msg) {
          var reject, resolve;
          resolve = _arg1.resolve, reject = _arg1.reject;
          if (msg == null) {
            msg = {};
          }
          if (typeof config.beforeCreate !== 'function') {
            return resolve(msg);
          }
          return config.beforeCreate(msg, function(error) {
            if (error != null) {
              return reject(error);
            }
            return resolve(msg);
          });
        });
        assign = function(msg) {
          var key;
          for (key in config.properties) {
            if (config.properties[key]["default"] != null) {
              msg[key] = config.properties[key]["default"];
              if (config.properties[key].hidden) {
                Object.defineProperty(msg, key, {
                  enumerable: false
                });
              }
            }
          }
          for (key in properties) {
            msg[key] = properties[key];
          }
          return msg;
        };
        after = deferred(function(_arg1, msg) {
          var reject, resolve;
          resolve = _arg1.resolve, reject = _arg1.reject;
          if (typeof config.afterCreate !== 'function') {
            return resolve(msg);
          }
          return config.afterCreate(msg, function(error) {
            if (error != null) {
              return reject(error);
            }
            return resolve(msg);
          });
        });
        return pipeline([
          function() {
            return before();
          }, function(msg) {
            return assign(msg);
          }, function(msg) {
            return after(msg);
          }
        ]).then(resolve, reject, notify);
      })
    }
  };
  testable = local;
  return local.Message;
};

return;

onceIfString = require('./decorators').onceIfString;

module.exports = Message = (function() {
  function Message(properties) {
    var composition, context, name, reply, _fn, _i, _len, _ref1,
      _this = this;
    if (properties == null) {
      properties = {};
    }
    context = {};
    composition = {
      context: ['title', 'description', 'origin', 'type', 'tenor', 'direction']
    };
    reply = void 0;
    _ref1 = composition.context;
    _fn = function(name) {
      return Object.defineProperty(_this, name, {
        get: function() {
          return context[name] || '';
        },
        set: onceIfString(function(value) {
          return context[name] = value;
        })
      });
    };
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      name = _ref1[_i];
      _fn(name);
    }
    if (typeof properties === 'object') {
      try {
        for (name in properties) {
          this[name] = properties[name];
        }
      } catch (_error) {}
    }
    Object.defineProperty(this, 'setResponder', {
      set: function(value) {
        if (reply == null) {
          return reply = value;
        }
      }
    });
    Object.defineProperty(this, 'event', {
      get: function() {
        if (_this.type === 'event') {
          return _this.title;
        }
      }
    });
    Object.defineProperty(this, 'info', {
      get: function() {
        if (_this.type === 'info') {
          return _this.title;
        }
      }
    });
    Object.defineProperty(this, 'context', {
      get: function() {
        var result, _j, _len1, _ref2;
        result = {};
        _ref2 = composition.context;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          name = _ref2[_j];
          result[name] = context[name];
        }
        if (reply != null) {
          result.responder = reply;
        }
        return result;
      }
    });
    Object.defineProperty(this, 'content', {
      get: function() {
        var result, _j, _len1, _ref2;
        result = {
          context: _this.context,
          payload: _this
        };
        _ref2 = composition.context;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          name = _ref2[_j];
          result.context[name] = context[name];
        }
        return result;
      }
    });
    Object.defineProperty(this, 'reply', {
      get: function() {
        return reply;
      }
    });
  }

  return Message;

})();
