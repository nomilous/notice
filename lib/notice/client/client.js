// Generated by CoffeeScript 1.6.3
var Connector, alreadyDefined, connectRejected, connector, createClient, defer, deferred, disconnected, hostname, notifier, reservedMessage, terminal, testable, undefinedArg, _ref;

hostname = require('os').hostname;

deferred = require('also').deferred;

notifier = require('../notifier');

Connector = require('./connector');

_ref = require('../errors'), terminal = _ref.terminal, reservedMessage = _ref.reservedMessage, undefinedArg = _ref.undefinedArg, alreadyDefined = _ref.alreadyDefined, connectRejected = _ref.connectRejected, disconnected = _ref.disconnected;

testable = void 0;

module.exports._client = function() {
  return testable;
};

module.exports.client = function(config) {
  var api, local, type;
  if (config == null) {
    config = {};
  }
  for (type in config.messages) {
    if (type.match(/connect|handshake|accept|reject|disconnect|resume|capsule|error/)) {
      throw reservedMessage(type);
    }
  }
  testable = local = {
    Notifier: notifier.notifier(config),
    clients: {},
    create: deferred(function(_arg, originName, opts, callback) {
      var already, client, error, notify, reject, resolve, socket, _fn;
      reject = _arg.reject, resolve = _arg.resolve, notify = _arg.notify;
      if (opts == null) {
        opts = {};
      }
      try {
        if (typeof originName !== 'string') {
          throw undefinedArg('originName');
        }
        if (local.clients[originName] != null) {
          throw alreadyDefined('originName', originName);
        }
        if (!((opts.connect != null) && typeof opts.connect.port === 'number')) {
          throw undefinedArg('opts.connect.port');
        }
        client = local.Notifier.create(originName);
        local.clients[originName] = client;
      } catch (_error) {
        error = _error;
        return terminal(error, reject, callback);
      }
      opts.context || (opts.context = {});
      opts.context.hostname = hostname();
      opts.context.pid = process.pid;
      socket = Connector.connect(opts.connect);
      client.connection || (client.connection = {});
      client.connection.state = 'pending';
      client.connection.stateAt = Date.now();
      already = false;
      _fn = function(type) {
        return socket.on(type, function(payload) {
          if (typeof client[type] !== 'function') {
            process.stderr.write("notice undefined message type '" + type + "'");
            return;
          }
          return client[type](payload);
        });
      };
      for (type in config.messages) {
        if (type === 'control') {
          continue;
        }
        _fn(type);
      }
      client.final({
        title: 'outbound socket interface'
      }, function(next, capsule) {
        var header;
        header = {
          version: 1
        };
        config = {
          type: capsule._type,
          "protected": capsule._protected,
          hidden: capsule._hidden
        };
        socket.emit('capsule', header, config, capsule.all);
        return next();
      });
      socket.on('connect', function() {
        if (client.connection.state === 'interrupted') {
          client.connection.state = 'resuming';
          client.connection.stateAt = Date.now();
          socket.emit('resume', originName, opts.connect.secret || '', opts.context || {});
          return;
        }
        client.connection.state = 'connecting';
        client.connection.stateAt = Date.now();
        return socket.emit('handshake', originName, opts.connect.secret || '', opts.context || {});
      });
      socket.on('accept', function() {
        var _base;
        if (client.connection.state === 'resuming') {
          client.connection.state = 'accepted';
          client.connection.stateAt = Date.now();
          (_base = client.connection).interruptions || (_base.interruptions = {
            count: 0
          });
          client.connection.interruptions.count++;
          return;
        }
        client.connection.state = 'accepted';
        client.connection.stateAt = Date.now();
        resolve(client);
        if (typeof callback === 'function') {
          return callback(null, client);
        }
      });
      socket.on('reject', function(rejection) {
        /* it may happen that the disconnect occurs before the reject, making the rejection reason 'vanish'*/

        terminal(connectRejected(originName, rejection), reject, callback);
        return already = true;
      });
      socket.on('disconnect', function() {
        if (client.connection.state !== 'accepted') {
          delete local.clients[originName];
          if (!already) {
            terminal(disconnected(originName), reject, callback);
          }
          already = true;
          return;
        }
        client.connection.state = 'interrupted';
        client.connection.stateAt = Date.now();
      });
      return socket.on('error', function(error) {
        if (!((client.connection != null) && client.connection.state === 'pending')) {
          console.log('TODO: handle socket error after connect|accept');
          console.log(error);
          return;
        }
        delete local.clients[originName];
        setTimeout((function() {
          reject(error);
          if (typeof callback === 'function') {
            if (!already) {
              callback(error);
            }
            return already = true;
          }
        }), opts.connect.errorWait || 2000);
      });
    })
  };
  return api = {
    create: local.create
  };
};

return;

connector = require('./connector');

notifier = require('./notifier');

defer = require('when').defer;

createClient = function(title, opts) {
  var notice;
  notice = notifier.create(title);
  return {
    onAssign: function(_arg) {
      var assigning, socket;
      socket = _arg.socket;
      assigning = defer();
      process.nextTick(function() {
        var event, _fn, _i, _len, _ref1;
        notice.first = function(msg, next) {
          msg.direction = 'out';
          return next();
        };
        notice.last = function(msg, next) {
          var type;
          if (msg.direction === 'out') {
            type = msg.context.type;
            socket.emit(type, msg.context, msg);
          }
          return next();
        };
        _ref1 = ['info', 'event'];
        _fn = function(event) {
          return socket.on(event, function(context, msg) {
            var tenor;
            msg.direction = 'in';
            msg.origin = context.origin;
            title = context.title;
            tenor = context.tenor;
            return notice[event][tenor](title, msg);
          });
        };
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          event = _ref1[_i];
          _fn(event);
        }
        return assigning.resolve(notice);
      });
      return assigning.promise;
    },
    onConnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('connect');
    },
    onReconnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('reconnect');
    },
    onDisconnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('disconnect');
    }
  };
};

module.exports = {
  connect: function(title, opts, callback) {
    var client;
    client = createClient(title, opts);
    return connector.connect({
      loglevel: opts.connect.loglevel,
      secret: opts.connect.secret,
      transport: opts.connect.transport,
      address: opts.connect.address,
      port: opts.connect.port,
      origin: opts.origin,
      onAssign: client.onAssign,
      onConnect: client.onConnect,
      onReconnect: client.onReconnect,
      onDisconnect: client.onDisconnect
    }, callback);
  }
};
