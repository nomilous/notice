// Generated by CoffeeScript 1.6.3
var Testable, testable;

Testable = void 0;

testable = void 0;

module.exports._Handler = function() {
  return Testable;
};

module.exports._handler = function() {
  return testable;
};

module.exports.handler = function(config) {
  var Handler, api;
  if (config == null) {
    config = {};
  }
  Testable = Handler = {
    create: function(hubName, hubContext, opts) {
      var handler;
      return testable = handler = {
        disconnect: function(socket) {
          return function() {
            var client, id;
            id = socket.id;
            try {
              client = hubContext.clients[id];
            } catch (_error) {}
            if (client == null) {
              return;
            }
            client.connected.state = 'disconnected';
            client.connected.stateAt = Date.now();
            return hubContext.connections();
          };
        },
        handshake: function(socket) {
          return function(originName, secret, context) {
            var client, id, previousID;
            id = socket.id;
            if (secret !== opts.listen.secret) {
              socket.emit('reject', {
                reason: 'bad secret'
              });
              socket.disconnect();
              return;
            }
            if (previousID = hubContext.name2id[originName]) {
              client = hubContext.clients[previousID];
              if (client.connected.state === 'connected') {
                socket.emit('reject', {
                  reason: 'already connected',
                  hostname: client.context.hostname,
                  pid: client.context.pid
                });
                socket.disconnect();
                hubContext.connections();
                return;
              }
              delete hubContext.clients[previousID];
              delete hubContext.name2id[originName];
              handler.accept(socket, client, originName, context);
              return;
            }
            client = {
              title: originName,
              context: context,
              hub: hubName,
              socket: socket
            };
            return handler.accept(socket, client, originName, context);
          };
        },
        resume: function(socket) {
          return function(originName, secret, context) {
            var client, id, previousID;
            id = socket.id;
            if (secret !== opts.listen.secret) {
              return socket.disconnect();
            }
            if (previousID = hubContext.name2id[originName]) {
              client = hubContext.clients[previousID];
              delete hubContext.clients[previousID];
              delete hubContext.name2id[originName];
              hubContext.clients[id] = client;
            } else {
              hubContext.clients[socket.id] = client = {
                title: originName,
                context: context,
                hub: hubName
              };
            }
            return handler.accept(socket, client, originName, context);
          };
        },
        accept: function(socket, client, originName, context) {
          var id;
          id = socket.id;
          hubContext.clients[id] = client;
          client.connected || (client.connected = {});
          client.connected.state = 'connected';
          client.connected.stateAt = Date.now();
          client.context.hostname = context.hostname;
          client.context.pid = context.pid;
          hubContext.name2id[originName] = id;
          socket.emit('accept');
          return hubContext.connections();
        }
      };
    }
  };
  return api = {
    create: Handler.create
  };
};
