// Generated by CoffeeScript 1.6.3
var deferred, handler, listener, notifier, testable;

deferred = require('also').deferred;

listener = require('./listener');

handler = require('./hub_handler').handler;

notifier = require('../notifier').notifier;

testable = void 0;

module.exports._hub = function() {
  return testable;
};

module.exports.hub = function(config) {
  var api, local, type;
  if (config == null) {
    config = {};
  }
  for (type in config.messages) {
    if (type.match(/connect|handshake|accept|reject|disconnect|resume|error/)) {
      throw new Error("notice: '" + type + "' is a reserved message type.");
    }
  }
  testable = local = {
    Notifier: notifier(config),
    Handler: handler(config),
    hubs: {},
    clients: {},
    name2id: {},
    connections: function() {},
    create: deferred(function(_arg, hubName, opts, callback) {
      var error, handle, hub, io, notify, reject, resolve;
      reject = _arg.reject, resolve = _arg.resolve, notify = _arg.notify;
      if (opts == null) {
        opts = {};
      }
      if (typeof hubName !== 'string') {
        error = new Error('Hub.create( hubName, opts ) requires hubName as string');
        reject(error);
        if (typeof callback === 'function') {
          callback(error);
        }
        return;
      }
      if (local.hubs[hubName] != null) {
        error = new Error("Hub.create( '" + hubName + "', opts ) is already defined");
        reject(error);
        if (typeof callback === 'function') {
          callback(error);
        }
        return;
      }
      try {
        local.hubs[hubName] = hub = local.Notifier.create(hubName);
      } catch (_error) {
        error = _error;
        reject(error);
        if (typeof callback === 'function') {
          callback(error);
        }
        return;
      }
      io = listener.listen(opts.listen, function(error, address) {
        if (error != null) {
          reject(error);
          if (typeof callback === 'function') {
            callback(error);
          }
          return;
        }
        hub.listening = address;
        resolve(hub);
        if (typeof callback === 'function') {
          return callback(null, hub);
        }
      });
      handle = local.Handler.create(hubName, hub, local, opts);
      return io.on('connection', function(socket) {
        socket.on('handshake', handle.handshake(socket));
        socket.on('disconnect', handle.disconnect(socket));
        return socket.on('resume', handle.resume(socket));
      });
    })
  };
  return api = {
    create: local.create
  };
};
