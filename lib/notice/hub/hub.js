// Generated by CoffeeScript 1.6.3
var alreadyDefined, deferred, handler, listener, manager, notifier, reservedCapsule, terminal, testable, ticker, undefinedArg, v1, _ref;

deferred = require('also').deferred;

listener = require('./listener');

handler = require('./hub_handler').handler;

notifier = require('../notifier').notifier;

manager = require('../../api/manager').manager;

ticker = require('../../api/ticker').ticker;

v1 = require('node-uuid').v1;

_ref = require('../errors'), terminal = _ref.terminal, reservedCapsule = _ref.reservedCapsule, undefinedArg = _ref.undefinedArg, alreadyDefined = _ref.alreadyDefined;

testable = void 0;

module.exports._hub = function() {
  return testable;
};

module.exports.hub = function(config) {
  var api, local;
  if (config == null) {
    config = {};
  }
  config.running || (config.running = {});
  if ((config.api != null) && (config.running.api == null)) {
    config.running.api = manager(config);
  }
  testable = local = {
    Notifier: notifier(config),
    Handler: handler(config),
    tickers: ticker(config),
    hubs: {},
    names: {},
    clients: {},
    create: deferred(function(_arg, hubName, opts, callback) {
      var error, handle, hub, io, notify, reject, resolve, seq, uuid;
      reject = _arg.reject, resolve = _arg.resolve, notify = _arg.notify;
      if (opts == null) {
        opts = {};
      }
      opts.uuid || (opts.uuid = v1());
      try {
        if (typeof hubName === 'object') {
          callback = opts;
          opts = hubName;
          hubName = hubName.title;
        }
        uuid = opts.uuid;
        if (typeof hubName !== 'string') {
          throw undefinedArg('hubName');
        }
        if (local.names[hubName] != null) {
          throw alreadyDefined('hubName', hubName);
        }
        if (local.hubs[uuid] != null) {
          throw alreadyDefined('hubUUID', uuid);
        }
        hub = local.Notifier.create(hubName, uuid);
        hub.cache = opts.cache || {};
        hub.tools = opts.tools || {};
        local.hubs[uuid] = hub;
        local.tickers.register(hub, opts);
        seq = 0;
        setInterval((function() {
          return hub.$$health({
            seq: seq++
          });
        }), 60000);
      } catch (_error) {
        error = _error;
        return terminal(error, reject, callback);
      }
      io = listener.listen(opts.listen, function(error, address) {
        if (error != null) {
          reject(error);
          if (typeof callback === 'function') {
            callback(error);
          }
          return;
        }
        hub.listening = address;
        hub.listening.adaptor = 'socket.io';
        resolve(hub);
        if (typeof callback === 'function') {
          return callback(null, hub);
        }
      });
      handle = local.Handler.create(hubName, hub, local, opts);
      return io.on('connection', function(socket) {
        socket.on('handshake', handle.handshake(socket));
        socket.on('disconnect', handle.disconnect(socket));
        socket.on('resume', handle.resume(socket));
        return socket.on('capsule', handle.capsule(socket));
      });
    })
  };
  if (config.running.api != null) {
    config.running.api.register(local);
  }
  return api = {
    create: local.create
  };
};
