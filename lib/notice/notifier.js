// Generated by CoffeeScript 1.6.3
var deferred, message, pipeline, testable, undefinedArg, _ref,
  __slice = [].slice;

_ref = require('also'), pipeline = _ref.pipeline, deferred = _ref.deferred;

message = require('./capsule/message').message;

undefinedArg = require('./errors').undefinedArg;

testable = void 0;

module.exports._notifier = function() {
  return testable;
};

module.exports.notifier = function(config) {
  var api, local, type;
  if (config == null) {
    config = {};
  }
  if (config.messages == null) {
    config.messages = {
      event: {}
    };
  }
  config.messages.control = {};
  testable = local = {
    messageTypes: {},
    middleware: {},
    notifiers: {},
    create: function(originCode) {
      var final, list, middlewareCount, notifier, traverse, type, _fn;
      if (typeof originCode !== 'string') {
        throw new Error('Notifier.create(originCode) requires originCode as string');
      }
      if (local.middleware[originCode] != null) {
        throw new Error("Notifier.create('" + originCode + "') is already defined");
      }
      middlewareCount = 0;
      local.middleware[originCode] = list = {};
      final = void 0;
      traverse = function(message) {
        var middleware, title;
        if (!(middlewareCount || (final != null))) {
          return message;
        }
        middleware = (function() {
          var _results;
          _results = [];
          for (title in list) {
            _results.push((function(title) {
              return deferred(function(_arg, capsule) {
                var error, next, notify, reject, resolve;
                resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
                if (capsule == null) {
                  capsule = message;
                }
                next = function() {
                  return resolve(capsule);
                };
                next.info = 'https://github.com/nomilous/notice/tree/develop/spec/notice#the-next-function';
                try {
                  return list[title](next, capsule);
                } catch (_error) {
                  error = _error;
                  return reject(error);
                }
              });
            })(title));
          }
          return _results;
        })();
        if (final != null) {
          middleware.push(deferred(function(_arg, capsule) {
            var error, notify, reject, resolve;
            resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
            if (capsule == null) {
              capsule = message;
            }
            try {
              return final((function() {
                return resolve(capsule);
              }), capsule);
            } catch (_error) {
              error = _error;
              return reject(error);
            }
          }));
        }
        return pipeline(middleware);
      };
      local.notifiers[originCode] = notifier = {
        use: function(opts, fn) {
          if (!((opts != null) && (opts.title != null) && (fn != null) && typeof fn === 'function')) {
            throw undefinedArg('opts.title and fn', 'use(opts, middlewareFn)');
          }
          if (list[opts.title] == null) {
            list[opts.title] = fn;
            middlewareCount++;
            return;
          }
          return process.stderr.write("notice: middleware '" + originCode + "' already exists, use the force()");
        },
        force: function(opts, fn) {
          if (!((opts != null) && (opts.title != null) && ((fn != null) && typeof fn === 'function') || ((opts["delete"] != null) && opts["delete"] === true))) {
            throw undefinedArg('opts.title and fn', 'use(opts, middlewareFn)');
          }
          if (opts["delete"] && (list[opts.title] != null)) {
            delete list[opts.title];
            middlewareCount++;
            return;
          }
          if (list[opts.title] == null) {
            middlewareCount++;
          }
          return list[opts.title] = fn;
        },
        final: function(opts, fn) {
          if (typeof final === 'function') {
            process.stderr.write("notice: final middleware cannot be reset! Not even using the force()");
            return;
          }
          return final = fn;
        }
      };
      _fn = function(type) {
        return notifier[type] = deferred(function() {
          var arg, args, callback, key, notify, payload, reject, resolve, _i, _len, _ref1;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref1 = args.shift(), resolve = _ref1.resolve, reject = _ref1.reject, notify = _ref1.notify;
          payload = {};
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            arg = args[_i];
            if ((typeof arg).match(/string|number/)) {
              if (payload[type] != null) {
                payload.description = arg;
              } else {
                payload[type] = arg;
              }
              continue;
            }
            if (arg instanceof Array) {
              continue;
            }
            for (key in arg) {
              if (key === type && (payload[key] != null)) {
                continue;
              }
              payload[key] = arg[key];
            }
          }
          if (typeof arg === 'function') {
            callback = arg;
          }
          return pipeline([
            function() {
              return local.messageTypes[type].create(payload);
            }, function(capsule) {
              return traverse(capsule);
            }
          ]).then(function(capsule) {
            resolve(capsule);
            if (callback != null) {
              return callback(null, capsule);
            }
          }, function(err) {
            reject(err);
            if (callback != null) {
              return callback(err);
            }
          }, notify);
        });
      };
      for (type in config.messages) {
        if (notifier[type] != null) {
          continue;
        }
        _fn(type);
      }
      return notifier;
    }
  };
  for (type in config.messages) {
    local.messageTypes[type] = message(type, config);
  }
  return api = {
    create: local.create
  };
};
