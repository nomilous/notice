// Generated by CoffeeScript 1.4.0
var Defer, Local, Message, Notifier, asResolver, isMiddleWare, pipeline;

pipeline = require('when/pipeline');

Defer = require('when').defer;

Message = require('./message');

Local = require('./local');

isMiddleWare = require('./decorators').isMiddleware;

asResolver = require('./decorators').asResolver;

module.exports = Notifier = {
  create: function(origin, defaultFn) {
    var api, first, firstCount, last, lastCount, middleware, notifier;
    if (typeof origin !== 'string') {
      throw new Error('Notifier.create( origin ) requires message origin as string');
    }
    first = [];
    firstCount = void 0;
    middleware = [];
    last = [];
    lastCount = void 0;
    if (Local()[origin] != null) {
      (isMiddleWare(asResolver(function(fn) {
        return last.push(fn);
      })))(Local()[origin].fn);
    } else if (defaultFn instanceof Function) {
      (isMiddleWare(asResolver(function(fn) {
        return last.push(fn);
      })))(defaultFn);
    }
    if (Local().all != null) {
      (isMiddleWare(asResolver(function(fn) {
        return last.push(fn);
      })))(Local().all);
    }
    firstCount = first.length;
    lastCount = last.length;
    notifier = function(title, descriptionOr, type, tenor) {
      var Done, fn, functions, message;
      message = new Message(descriptionOr);
      Done = Defer();
      message.title = title;
      message.description = descriptionOr;
      message.origin = origin;
      message.type = type;
      message.tenor = tenor;
      functions = [];
      return pipeline((function() {
        var _i, _len, _ref, _results;
        _ref = first.concat(middleware).concat(last);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fn = _ref[_i];
          functions.push(fn);
          _results.push(function() {
            return functions.shift()(message);
          });
        }
        return _results;
      })()).then(function() {
        return Done.resolve(message);
      }, function() {
        return Done.reject.apply(null, arguments);
      }, function() {
        return Done.notify.apply(null, arguments);
      });
      return Done.promise;
    };
    api = function(title, description) {
      return notifier(title, description, 'info', 'normal');
    };
    api.use = isMiddleWare(asResolver(function(fn) {
      return middleware.push(fn);
    }));
    api.info = function(title, description) {
      return notifier(title, description, 'info', 'normal');
    };
    api.event = function(title, description) {
      return notifier(title, description, 'event', 'normal');
    };
    api.info.normal = api.info;
    api.info.good = function(title, description) {
      return notifier(title, description, 'info', 'good');
    };
    api.info.bad = function(title, description) {
      return notifier(title, description, 'info', 'bad');
    };
    api.event.normal = api.event;
    api.event.good = function(title, description) {
      return notifier(title, description, 'event', 'good');
    };
    api.event.bad = function(title, description) {
      return notifier(title, description, 'event', 'bad');
    };
    api.task = function() {
      return console.log('TASK not yet implemented', arguments);
    };
    Object.defineProperty(api, 'first', {
      set: isMiddleWare(asResolver(function(fn) {
        if (first.length > firstCount) {
          return;
        }
        return first.unshift(fn);
      }))
    });
    Object.defineProperty(api, 'last', {
      set: isMiddleWare(asResolver(function(fn) {
        if (last.length > lastCount) {
          return;
        }
        return last[lastCount] = fn;
      }))
    });
    return api;
  }
};
