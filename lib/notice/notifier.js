// Generated by CoffeeScript 1.6.3
var deferred, lifecycle, pipeline, testable, undefinedArg, v1, _ref,
  __slice = [].slice;

_ref = require('also'), pipeline = _ref.pipeline, deferred = _ref.deferred;

lifecycle = require('./capsule/lifecycle').lifecycle;

undefinedArg = require('./errors').undefinedArg;

v1 = require('node-uuid').v1;

testable = void 0;

module.exports._notifier = function() {
  return testable;
};

module.exports.notifier = function(config) {
  var api, local, type;
  if (config == null) {
    config = {};
  }
  if (config.capsule == null) {
    config.capsule = {
      event: {}
    };
  }
  config.capsule.control = {};
  testable = local = {
    capsuleTypes: {},
    notifiers: {},
    notifierMetrics: {},
    middleware: {},
    middlewareMetrics: {},
    create: function(title, uuid) {
      var first, last, list, localMetrics, middlewareCount, mwMetrics, nfMetrics, notifier, traverse, type, _fn;
      if (uuid == null) {
        uuid = v1();
      }
      if (typeof title !== 'string') {
        throw new Error('Notifier.create(title) requires title as string');
      }
      if (local.middleware[title] != null) {
        throw new Error("Notifier.create('" + title + "') is already defined");
      }
      middlewareCount = 0;
      local.middleware[title] = list = {};
      local.middlewareMetrics[title] = mwMetrics = {};
      local.notifierMetrics[title] = nfMetrics = {
        local: localMetrics = {
          input: 0,
          output: 0,
          reject: {
            usr: 0,
            sys: 0
          },
          cancel: {
            usr: 0,
            sys: 0
          }
        }
      };
      first = function(next) {
        return next();
        /* null*/

      };
      last = function(next) {
        return next();
        /* null*/

      };
      traverse = function(capsule) {
        var middleware, traversal;
        if (!(middlewareCount || (last != null))) {
          return capsule;
        }
        traversal = {};
        middleware = (function() {
          var _results;
          _results = [];
          for (title in list) {
            _results.push((function(title) {
              return deferred(function(_arg) {
                var error, next, notify, reject, resolve;
                resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
                next = function() {
                  return process.nextTick(function() {
                    return resolve(capsule);
                  });
                };
                next.notify = function(update) {
                  return process.nextTick(function() {
                    return notify(update);
                  });
                };
                next.reject = function(error) {
                  return process.nextTick(function() {
                    return reject(error);
                  });
                };
                next.cancel = function() {};
                try {
                  return list[title](next, capsule, traversal);
                } catch (_error) {
                  error = _error;
                  localMetrics.reject.usr++;
                  return reject(error);
                }
              });
            })(title));
          }
          return _results;
        })();
        if (last != null) {
          middleware.push(deferred(function(_arg) {
            var error, next, notify, reject, resolve;
            resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
            next = function() {
              return process.nextTick(function() {
                return resolve(capsule);
              });
            };
            next.notify = function(update) {
              return process.nextTick(function() {
                return notify(update);
              });
            };
            next.reject = function(error) {
              return process.nextTick(function() {
                return reject(error);
              });
            };
            next.cancel = function() {};
            try {
              last(next, capsule, traversal);
              return localMetrics.output++;
            } catch (_error) {
              error = _error;
              localMetrics.reject.sys++;
              return reject(error);
            }
          }));
        }
        if (first != null) {
          middleware.unshift(deferred(function(_arg) {
            var error, next, notify, reject, resolve;
            resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
            localMetrics.input++;
            next = function() {
              return process.nextTick(function() {
                return resolve(capsule);
              });
            };
            next.notify = function(update) {
              return process.nextTick(function() {
                return notify(update);
              });
            };
            next.reject = function(error) {
              return process.nextTick(function() {
                return reject(error);
              });
            };
            next.cancel = function() {};
            try {
              return first(next, capsule, traversal);
            } catch (_error) {
              error = _error;
              localMetrics.reject.sys++;
              return reject(error);
            }
          }));
        }
        return pipeline(middleware);
      };
      local.notifiers[title] = notifier = {
        use: function(opts, fn) {
          if (!((opts != null) && (opts.title != null) && (fn != null) && typeof fn === 'function')) {
            throw undefinedArg('opts.title and fn', 'use(opts, middlewareFn)');
          }
          if (opts.last != null) {
            if (typeof last === 'function' && !last.toString().match(/null/)) {
              process.stderr.write("notice: last middleware cannot be reset! Not even using the force()\n");
              return;
            }
            last = fn;
            return;
          }
          if (opts.first != null) {
            if (typeof first === 'function' && !first.toString().match(/null/)) {
              process.stderr.write("notice: first middleware cannot be reset! Not even using the force()\n");
              return;
            }
            first = fn;
            return;
          }
          if (list[opts.title] == null) {
            list[opts.title] = fn;
            middlewareCount++;
            return;
          }
          return process.stderr.write("notice: middleware '" + opts.title + "' already exists, use the force()\n");
        },
        force: function(opts, fn) {
          if (!((opts != null) && (opts.title != null) && ((fn != null) && typeof fn === 'function') || ((opts["delete"] != null) && opts["delete"] === true))) {
            throw undefinedArg('opts.title and fn', 'use(opts, middlewareFn)');
          }
          if (opts["delete"] && (list[opts.title] != null)) {
            delete list[opts.title];
            middlewareCount++;
            return;
          }
          if (list[opts.title] == null) {
            middlewareCount++;
          }
          return list[opts.title] = fn;
        }
      };
      Object.defineProperty(notifier, 'uuid', {
        writable: false,
        enumerable: true,
        value: uuid
      });
      Object.defineProperty(notifier, 'title', {
        writable: false,
        enumerable: true,
        value: title
      });
      Object.defineProperty(notifier, 'serialize', {
        value: function(detail) {
          var middlewareTitle, middlewares, mmetics;
          if (detail == null) {
            detail = 1;
          }
          switch (detail) {
            case 1:
              return {
                title: notifier.title,
                uuid: notifier.uuid,
                metrics: nfMetrics
              };
            case 2:
              middlewares = local.middleware[notifier.title];
              mmetics = local.middlewareMetrics[notifier.title];
              return {
                title: notifier.title,
                uuid: notifier.uuid,
                metrics: nfMetrics,
                middleware: (function() {
                  var _results;
                  _results = [];
                  for (middlewareTitle in middlewares) {
                    _results.push({
                      title: middlewareTitle,
                      metrics: mmetics
                    });
                  }
                  return _results;
                })()
              };
          }
        }
      });
      Object.defineProperty(notifier, 'raw', {
        get: function() {
          return function(payload) {
            return traverse(payload);
          };
        }
      });
      _fn = function(type) {
        return notifier[type] = deferred(function() {
          var arg, args, callback, key, notify, payload, reject, resolve, _i, _len, _ref1;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref1 = args.shift(), resolve = _ref1.resolve, reject = _ref1.reject, notify = _ref1.notify;
          payload = {};
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            arg = args[_i];
            if ((typeof arg).match(/string|number/)) {
              if (payload[type] != null) {
                payload.description = arg;
              } else {
                payload[type] = arg;
              }
              continue;
            }
            if (arg instanceof Array) {
              continue;
            }
            for (key in arg) {
              if (key === type && (payload[key] != null)) {
                continue;
              }
              payload[key] = arg[key];
            }
          }
          if (typeof arg === 'function') {
            callback = arg;
          }
          return pipeline([
            function() {
              return local.capsuleTypes[type].create(payload);
            }, function(capsule) {
              return traverse(capsule);
            }
          ]).then(function(capsule) {
            resolve(capsule);
            if (callback != null) {
              return callback(null, capsule);
            }
          }, function(err) {
            reject(err);
            if (callback != null) {
              return callback(err);
            }
          }, notify);
        });
      };
      for (type in config.capsule) {
        if (notifier[type] != null) {
          continue;
        }
        _fn(type);
      }
      return notifier;
    }
  };
  for (type in config.capsule) {
    local.capsuleTypes[type] = lifecycle(type, config);
  }
  return api = {
    create: local.create
  };
};
