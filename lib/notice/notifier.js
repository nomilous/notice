// Generated by CoffeeScript 1.6.3
var deferred, message, pipeline, testable, _ref;

_ref = require('also'), pipeline = _ref.pipeline, deferred = _ref.deferred;

message = require('./message').message;

testable = void 0;

module.exports._notifier = function() {
  return testable;
};

module.exports.notifier = function(config) {
  var api, local, type;
  if (config == null) {
    config = {};
  }
  testable = local = {
    messageTypes: {},
    middleware: {},
    create: function(originCode) {
      var list, notifier, regSequence, traverse, type, _fn;
      if (typeof originCode !== 'string') {
        throw new Error('Notifier.create(originCode) requires originCode as string');
      }
      if (local.middleware[originCode] != null) {
        throw new Error("Notifier.create('" + originCode + "') is already defined");
      }
      regSequence = 0;
      local.middleware[originCode] = list = {};
      traverse = function(message) {
        var title;
        if (!regSequence) {
          return message;
        }
        return pipeline((function() {
          var _results;
          _results = [];
          for (title in list) {
            _results.push((function(title) {
              return deferred(function(_arg, msg) {
                var error, notify, reject, resolve;
                resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
                if (msg == null) {
                  msg = message;
                }
                try {
                  return list[title](msg, function() {
                    return resolve(msg);
                  });
                } catch (_error) {
                  error = _error;
                  return reject(error);
                }
              });
            })(title));
          }
          return _results;
        })());
      };
      notifier = {
        use: function(opts, fn) {
          if (typeof opts === 'function') {
            return list[++regSequence] = opts;
          } else {
            if (!((opts != null) && (opts.title != null) && (fn != null) && typeof fn === 'function')) {
              throw new Error("Notifier.use(opts, fn) requires opts.title and fn");
            }
            list[opts.title] = fn;
            return regSequence++;
          }
        }
      };
      _fn = function(type) {
        return notifier[type] = function(payload) {
          if (payload == null) {
            payload = {};
          }
          payload._type = type;
          return pipeline([
            function() {
              return local.messageTypes[type].create(payload);
            }, function(msg) {
              return traverse(msg);
            }
          ]);
        };
      };
      for (type in config.messages) {
        if (type === 'use') {
          continue;
        }
        _fn(type);
      }
      return notifier;
    }
  };
  for (type in config.messages) {
    local.messageTypes[type] = message(config.messages[type]);
  }
  return api = {
    create: local.create
  };
};
