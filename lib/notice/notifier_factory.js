// Generated by CoffeeScript 1.4.0
var NotifierFactory, When, pipeline;

When = require('when');

pipeline = require('when/pipeline');

module.exports = NotifierFactory = (function() {

  function NotifierFactory(moo) {
    this.moo = moo;
    this.middleware = [];
  }

  NotifierFactory.prototype.create = function(config, callback) {
    var notifier,
      _this = this;
    config || (config = {});
    if (typeof config.messenger !== 'function') {
      throw new Error("" + this.constructor.name + " requires config.messenger");
    }
    notifier = function() {
      var fn, functions, message;
      message = {
        content: {}
      };
      message.content.label = arguments[0];
      message.content.description = arguments[1];
      if (!(_this.middleware.length > 0)) {
        return config.messenger(message);
      }
      functions = [];
      return pipeline((function() {
        var _i, _len, _ref, _results;
        _ref = this.middleware;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fn = _ref[_i];
          functions.unshift(fn);
          _results.push(function(msg) {
            return functions.pop()(msg || message);
          });
        }
        return _results;
      }).call(_this)).then(function(finalMessage) {
        return config.messenger(finalMessage);
      }, function(error) {
        return console.log("\nERROR IN MESSENGER MIDDLEWARE\n-----------------------------\n\n            um?\n            \n", error.stack, '\n');
      });
    };
    notifier.use = function(fn) {
      return _this.register(fn);
    };
    return callback(null, notifier);
  };

  NotifierFactory.prototype.register = function(fn) {
    if (!this.valid(fn)) {
      throw new Error('terminal middleware detected');
    }
    return this.middleware.push(function(msg) {
      var deferral;
      deferral = When.defer();
      fn(msg, deferral.resolve);
      return deferral.promise;
    });
  };

  NotifierFactory.prototype.valid = function(fn) {
    var fnArgs, nextWasCalled;
    fnArgs = fn.toString().match(/^function\W*\(\W*(.*)\W*,\W*(.*)\W*\)/).slice(1, 3).map(function(arg) {
      return arg.trim();
    });
    nextWasCalled = new RegExp("" + fnArgs[1] + "\W*\\(\W*" + fnArgs[0] + "\W*\\)");
    if (!fn.toString().match(nextWasCalled)) {
      return false;
    }
    return true;
  };

  return NotifierFactory;

})();
