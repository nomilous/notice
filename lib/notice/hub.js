// Generated by CoffeeScript 1.4.0
var Notifier, listen;

listen = require('./listen');

Notifier = require('./notifier');

module.exports.create = function(hubName, opts, callback) {
  var inbound, io, responder, responders, _base;
  if (typeof hubName !== 'string') {
    throw new Error('Notifier.listen( hubName, opts ) requires hubName as string');
  }
  responders = {};
  responder = function(context, socket, callback) {
    responders[socket.id] = Notifier.create("" + hubName + "::outbound");
    return callback();
  };
  opts || (opts = {});
  opts.listen || (opts.listen = {});
  (_base = opts.listen).secret || (_base.secret = '');
  opts.hub = {};
  inbound = Notifier.create("" + hubName + "::inbound");
  io = listen({
    address: opts.listen.address,
    port: opts.listen.port,
    cert: opts.listen.cert,
    key: opts.listen.key
  }, function(error, address) {
    opts.listening = address;
    if (typeof callback === 'function') {
      return callback(error, inbound);
    }
  });
  io.on('connection', function(socket) {
    var event, _fn, _i, _len, _ref;
    socket.on('handshake', function(secret, context) {
      if (secret === opts.listen.secret) {
        return responder(context, socket, function() {
          return socket.emit('accept');
        });
      } else {
        return socket.disconnect();
      }
    });
    _ref = ['info', 'event'];
    _fn = function(event) {
      return socket.on(event, function(payload) {
        var tenor, title;
        title = payload.context.title;
        tenor = payload.context.tenor;
        return inbound[event][tenor](title, payload);
      });
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      event = _ref[_i];
      _fn(event);
    }
    return socket.on('disconnect', function() {});
  });
  return opts;
};
