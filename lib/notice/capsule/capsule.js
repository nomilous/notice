// Generated by CoffeeScript 1.6.3
var Testable, testable;

Testable = void 0;

testable = void 0;

module.exports._Capsule = function() {
  return Testable;
};

module.exports._capsule = function() {
  return testable;
};

module.exports.capsule = function(config) {
  var Capsule, factory, factoryApi;
  if (config == null) {
    config = {};
  }
  Testable = factory = {
    create: function(opts) {
      var external, internal;
      if (opts == null) {
        opts = {};
      }
      testable = internal = {
        uuid: opts.uuid,
        hidden: {},
        "protected": {}
      };
      external = {};
      Object.defineProperty(external, '$$uuid', {
        enumarable: false,
        get: function() {
          return internal.uuid;
        },
        set: function(value) {
          if (internal.uuid == null) {
            return internal.uuid = value;
          }
        }
      });
      Object.defineProperty(external, '$$set', {
        enumarable: false,
        get: function() {
          return function(hash) {
            var firstKey;
            for (firstKey in hash) {
              break;
            }
            if (firstKey === 'uuid') {
              return;
            }
            if (firstKey === 'hidden') {
              return;
            }
            if (firstKey === 'protected') {
              return;
            }
            internal[firstKey] = hash[firstKey];
            external[firstKey] = internal[firstKey];
            if (hash.hidden != null) {
              if (hash.hidden) {
                internal.hidden[firstKey] = 1;
              } else {
                delete internal.hidden[firstKey];
              }
              Object.defineProperty(external, firstKey, {
                enumerable: !hash.hidden
              });
            }
            if (hash["protected"] != null) {
              if (hash["protected"]) {
                internal["protected"][firstKey] = 1;
              }
              return Object.defineProperty(external, firstKey, {
                writable: !hash["protected"]
              });
            }
          };
        }
      });
      Object.defineProperty(external, '$$all', {
        enumarable: false,
        get: function() {
          var all, key, _i, _len, _ref;
          all = {};
          _ref = ((function() {
            var _results;
            _results = [];
            for (key in internal.hidden) {
              if (typeof internal[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          })()).concat((function() {
            var _results;
            _results = [];
            for (key in external) {
              if (typeof external[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          })());
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            all[key] = internal[key];
          }
          return all;
        }
      });
      Object.defineProperty(external, '$$protected', {
        enumerable: false,
        get: function() {
          return internal["protected"];
        }
      });
      return Object.defineProperty(external, '$$hidden', {
        enumerable: false,
        get: function() {
          return internal.hidden;
        }
      });
    }
  };
  return factoryApi = {
    create: factory.create
  };
  return Testable = Capsule = (function() {
    function Capsule(params) {
      var uuid,
        _this = this;
      if (params == null) {
        params = {};
      }
      uuid = params.uuid;
      this.$$hidden = {};
      Object.defineProperty(this, '$$hidden', {
        enumerable: false
      });
      this.$$protected = {};
      Object.defineProperty(this, '$$protected', {
        enumerable: false
      });
      Object.defineProperty(this, '$$uuid', {
        enumarable: false,
        get: function() {
          return uuid;
        },
        set: function(value) {
          if (uuid == null) {
            return uuid = value;
          }
        }
      });
      Object.defineProperty(this, '$$all', {
        enumerable: false,
        get: function() {
          var allProperties, key, _i, _len, _ref;
          allProperties = {};
          _ref = ((function() {
            var _results;
            _results = [];
            for (key in this.$$hidden) {
              if (typeof this[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          }).call(_this)).concat((function() {
            var _results;
            _results = [];
            for (key in this) {
              if (typeof this[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          }).call(_this));
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            allProperties[key] = _this[key];
          }
          return allProperties;
        }
      });
      testable = this;
    }

    Capsule.prototype.$$set = function(opts) {
      var key, local,
        _this = this;
      local = {};
      for (key in opts) {
        break;
      }
      if (opts.watched != null) {
        if (opts["protected"]) {
          process.stderr.write("cannot watch protected property:" + key);
        } else {
          Object.defineProperty(this, key, {
            enumerable: true,
            get: function() {
              return local[key];
            },
            set: function(value) {
              var previous;
              previous = local[key];
              local[key] = value;
              return opts.watched({
                property: key,
                from: previous,
                to: value,
                capsule: _this
              });
            }
          });
        }
      }
      this[key] = opts[key];
      if (opts.hidden != null) {
        if (opts.hidden) {
          this.$$hidden[key] = 1;
        } else {
          delete this.$$hidden[key];
        }
        Object.defineProperty(this, key, {
          enumerable: !opts.hidden
        });
      }
      if (opts["protected"] != null) {
        if (opts["protected"]) {
          this.$$protected[key] = 1;
        }
        return Object.defineProperty(this, key, {
          writable: !opts["protected"]
        });
      }
    };

    return Capsule;

  })();
};
