// Generated by CoffeeScript 1.6.3
var testable, uuid;

uuid = require('node-uuid');

testable = void 0;

module.exports._capsule = function() {
  return testable;
};

module.exports.capsule = function(config) {
  var Capsule;
  if (config == null) {
    config = {};
  }
  return testable = Capsule = (function() {
    function Capsule(params) {
      var _this = this;
      if (params == null) {
        params = {};
      }
      this._hidden = {};
      Object.defineProperty(this, '_hidden', {
        enumerable: false
      });
      this._protected = {};
      Object.defineProperty(this, '_protected', {
        enumerable: false
      });
      Object.defineProperty(this, '_uuid', {
        enumarable: false,
        writable: false,
        value: params.uuid || uuid.v1()
      });
      Object.defineProperty(this, 'all', {
        enumerable: false,
        get: function() {
          var allProperties, key, _i, _len, _ref;
          allProperties = {};
          _ref = ((function() {
            var _results;
            _results = [];
            for (key in this._hidden) {
              if (typeof this[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          }).call(_this)).concat((function() {
            var _results;
            _results = [];
            for (key in this) {
              if (typeof this[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          }).call(_this));
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            allProperties[key] = _this[key];
          }
          return allProperties;
        }
      });
    }

    Capsule.prototype.set = function(opts) {
      var key, local,
        _this = this;
      local = {};
      for (key in opts) {
        break;
      }
      if (opts.watched != null) {
        if (opts["protected"]) {
          process.stderr.write("cannot watch protected property:" + key);
        } else {
          Object.defineProperty(this, key, {
            enumerable: true,
            get: function() {
              return local[key];
            },
            set: function(value) {
              var previous;
              previous = local[key];
              local[key] = value;
              return opts.watched({
                property: key,
                from: previous,
                to: value,
                capsule: _this
              });
            }
          });
        }
      }
      this[key] = opts[key];
      if (opts.hidden != null) {
        if (opts.hidden) {
          this._hidden[key] = 1;
        } else {
          delete this._hidden[key];
        }
        Object.defineProperty(this, key, {
          enumerable: !opts.hidden
        });
      }
      if (opts["protected"] != null) {
        if (opts["protected"]) {
          this._protected[key] = 1;
        }
        return Object.defineProperty(this, key, {
          writable: !opts["protected"]
        });
      }
    };

    return Capsule;

  })();
};
