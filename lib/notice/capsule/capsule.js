// Generated by CoffeeScript 1.6.3
var Testable, testable;

Testable = void 0;

testable = void 0;

module.exports._Capsule = function() {
  return Testable;
};

module.exports._capsule = function() {
  return testable;
};

module.exports.capsule = function(config) {
  var factory;
  if (config == null) {
    config = {};
  }
  return Testable = factory = {
    create: function(opts) {
      var external, internal;
      if (opts == null) {
        opts = {};
      }
      testable = internal = {
        uuid: opts.uuid,
        hidden: {},
        "protected": {}
      };
      external = {};
      Object.defineProperty(external, '$uuid', {
        enumarable: false,
        get: function() {
          return internal.uuid;
        },
        set: function(value) {
          if (internal.uuid == null) {
            return internal.uuid = value;
          }
        }
      });
      Object.defineProperty(external, '$set', {
        enumarable: false,
        get: function() {
          return function(hash) {
            var firstKey;
            for (firstKey in hash) {
              break;
            }
            if (firstKey === 'uuid') {
              return;
            }
            if (firstKey === 'hidden') {
              return;
            }
            if (firstKey === 'protected') {
              return;
            }
            if (hash.watched != null) {
              hash.watched.count = 0;
              if (hash["protected"]) {
                process.stderr.write("cannot watch protected property:" + firstKey);
              } else {
                Object.defineProperty(external, firstKey, {
                  enumerable: true,
                  get: function() {
                    return internal[firstKey];
                  },
                  set: function(value) {
                    var previous;
                    previous = internal[firstKey];
                    internal[firstKey] = value;
                    if (hash.watched.count !== 0) {
                      hash.watched({
                        property: firstKey,
                        from: previous,
                        to: value,
                        capsule: external
                      });
                    }
                    return hash.watched.count++;
                  }
                });
              }
            }
            external[firstKey] = hash[firstKey];
            if (hash.hidden != null) {
              if (hash.hidden) {
                internal.hidden[firstKey] = 1;
              } else {
                delete internal.hidden[firstKey];
              }
              Object.defineProperty(external, firstKey, {
                enumerable: !hash.hidden
              });
            }
            if (hash["protected"] != null) {
              if (hash["protected"]) {
                internal["protected"][firstKey] = 1;
              }
              return Object.defineProperty(external, firstKey, {
                writable: !hash["protected"]
              });
            }
          };
        }
      });
      Object.defineProperty(external, '$all', {
        enumarable: false,
        get: function() {
          var all, key, _i, _len, _ref;
          all = {};
          _ref = ((function() {
            var _results;
            _results = [];
            for (key in internal.hidden) {
              if (typeof internal[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          })()).concat((function() {
            var _results;
            _results = [];
            for (key in external) {
              if (typeof external[key] === 'function') {
                continue;
              }
              _results.push(key);
            }
            return _results;
          })());
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            all[key] = external[key];
          }
          return all;
        }
      });
      Object.defineProperty(external, '$protected', {
        enumerable: false,
        get: function() {
          return internal["protected"];
        }
      });
      Object.defineProperty(external, '$hidden', {
        enumerable: false,
        get: function() {
          return internal.hidden;
        }
      });
      return external;
    }
  };
};
