// Generated by CoffeeScript 1.6.3
var capsule, deferred, v1;

v1 = require('node-uuid').v1;

deferred = require('also').deferred;

capsule = require('./capsule').capsule;

module.exports.lifecycle = function(type, config) {
  var local;
  if (config == null) {
    config = {};
  }
  return local = {
    Capsule: capsule(config),
    config: (function() {
      try {
        return config.capsule[type];
      } catch (_error) {}
    })(),
    cache: {},
    create: deferred(function(_arg, properties) {
      var assign, cap, done, error, key, reject, resolve;
      resolve = _arg.resolve, reject = _arg.reject;
      if (properties == null) {
        properties = {};
      }
      cap = new local.Capsule;
      cap.$$set({
        $$type: type,
        "protected": true,
        hidden: true
      });
      for (key in properties) {
        if (key !== type) {
          cap[key] = properties[key];
          continue;
        }
        assign = {};
        assign[key] = properties[key];
        assign["protected"] = true;
        if (local.config.nondescript) {
          assign.hidden = true;
        }
        cap.$$set(assign);
      }
      try {
        if (local.config.before) {
          done = function() {
            if (cap.$$uuid == null) {
              cap.$$uuid = v1();
            }
            return resolve(cap);
          };
          try {
            return local.config.before(done, cap);
          } catch (_error) {
            error = _error;
            return reject(error);
          }
        }
      } catch (_error) {}
      if (cap._uuid == null) {
        cap.$$uuid = v1();
      }
      return resolve(cap);
    })
  };
};
