// Generated by CoffeeScript 1.6.3
var capsule, deferred, pipeline, testable, _ref;

_ref = require('also'), deferred = _ref.deferred, pipeline = _ref.pipeline;

capsule = require('./capsule').capsule;

testable = void 0;

module.exports._message = function() {
  return testable;
};

module.exports.message = function(type, config) {
  var local, thisConfig;
  if (config == null) {
    config = {};
  }
  thisConfig = {};
  try {
    thisConfig = config.capsules[type];
  } catch (_error) {}
  local = {
    Capsule: capsule(config),
    Message: {
      create: deferred(function(_arg, properties) {
        var after, assign, before, notify, reject, resolve;
        resolve = _arg.resolve, reject = _arg.reject, notify = _arg.notify;
        if (properties == null) {
          properties = {};
        }
        before = deferred(function(_arg1, capsule) {
          var reject, resolve, typeValue;
          resolve = _arg1.resolve, reject = _arg1.reject;
          capsule.set({
            _type: type,
            "protected": true,
            hidden: true
          });
          if (properties[type] != null) {
            typeValue = {};
            typeValue[type] = properties[type];
            typeValue["protected"] = true;
            capsule.set(typeValue);
          }
          if (typeof thisConfig.beforeCreate !== 'function') {
            return resolve(capsule);
          }
          return thisConfig.beforeCreate(function(error) {
            if (error != null) {
              return reject(error);
            }
            return resolve(capsule);
          }, capsule);
        });
        assign = function(capsule) {
          var key;
          for (key in properties) {
            capsule[key] = properties[key];
          }
          return capsule;
        };
        after = deferred(function(_arg1, capsule) {
          var reject, resolve;
          resolve = _arg1.resolve, reject = _arg1.reject;
          if (typeof thisConfig.afterCreate !== 'function') {
            return resolve(capsule);
          }
          return thisConfig.afterCreate(function(error) {
            if (error != null) {
              return reject(error);
            }
            return resolve(capsule);
          }, capsule);
        });
        return pipeline([
          function() {
            return new local.Capsule;
          }, function(capsule) {
            return before(capsule);
          }, function(capsule) {
            return assign(capsule);
          }, function(capsule) {
            return after(capsule);
          }
        ]).then(resolve, reject, notify);
      })
    }
  };
  testable = local;
  return local.Message;
};
