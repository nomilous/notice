// Generated by CoffeeScript 1.6.3
var ioclient, pipeline;

ioclient = require('socket.io-client');

module.exports.connect = function(opts) {
  opts.transport || (opts.transport = 'http');
  opts.address || (opts.address = 'localhost');
  if (opts.allowUncertified) {
    require('https').globalAgent.options.rejectUnauthorized = false;
  }
  return ioclient.connect("" + opts.transport + "://" + opts.address + ":" + opts.port);
};

return;

pipeline = require('when/pipeline');

require('https').globalAgent.options.rejectUnauthorized = false;

ioclient = require('socket.io-client');

module.exports = {
  connect: function() {
    var accepted, arg, callback, connected, opts, socket, _i, _len;
    opts = arguments['0'] || {};
    if (opts instanceof Function) {
      opts = {};
    }
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      arg = arguments[_i];
      callback = arg;
    }
    opts.port || (opts.port = 10001);
    opts.address || (opts.address = 'localhost');
    opts.transport || (opts.transport = 'http');
    opts.onAssign || (opts.onAssign = function() {});
    opts.onConnect || (opts.onConnect = function() {});
    opts.onReconnect || (opts.onReconnect = function() {});
    opts.onDisconnect || (opts.onDisconnect = function() {});
    accepted = false;
    connected = false;
    socket = ioclient.connect("" + opts.transport + "://" + opts.address + ":" + opts.port);
    socket.on('error', function(error) {
      if (typeof callback === 'function') {
        if (!accepted) {
          return callback(error, null);
        }
      }
    });
    socket.on('disconnect', function() {
      connected = false;
      if (!accepted) {
        opts.onDisconnect({
          socket: socket
        });
        return callback(new Error('could not connect or failed secret', null));
      }
      return opts.onDisconnect({
        socket: socket
      });
    });
    socket.on('accept', function() {
      connected = true;
      if (!accepted) {
        accepted = true;
        pipeline([
          function() {
            return opts.onAssign({
              socket: socket
            });
          }, function(notifier) {
            return callback(null, notifier);
          }, function() {
            return opts.onConnect({
              socket: socket
            });
          }
        ]).then(function(result) {}, function(error) {
          return callback(error);
        });
      }
      return opts.onReconnect({
        socket: socket
      });
    });
    return socket.on('connect', function() {
      return socket.emit('handshake', opts.secret || '', opts.origin);
    });
  }
};
