// Generated by CoffeeScript 1.6.3
var connector, createClient, defer, notifier;

connector = require('./connector');

notifier = require('./notifier');

defer = require('when').defer;

createClient = function(title, opts) {
  var notice;
  notice = notifier.create(title);
  return {
    onAssign: function(_arg) {
      var assigning, socket;
      socket = _arg.socket;
      assigning = defer();
      process.nextTick(function() {
        var event, _fn, _i, _len, _ref;
        notice.first = function(msg, next) {
          msg.direction = 'out';
          return next();
        };
        notice.last = function(msg, next) {
          var type;
          if (msg.direction === 'out') {
            type = msg.context.type;
            socket.emit(type, msg.context, msg);
          }
          return next();
        };
        _ref = ['info', 'event'];
        _fn = function(event) {
          return socket.on(event, function(context, msg) {
            var tenor;
            msg.direction = 'in';
            msg.origin = context.origin;
            title = context.title;
            tenor = context.tenor;
            return notice[event][tenor](title, msg);
          });
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          event = _ref[_i];
          _fn(event);
        }
        return assigning.resolve(notice);
      });
      return assigning.promise;
    },
    onConnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('connect');
    },
    onReconnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('reconnect');
    },
    onDisconnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('disconnect');
    }
  };
};

module.exports = {
  connect: function(title, opts, callback) {
    var client;
    client = createClient(title, opts);
    return connector.connect({
      loglevel: opts.connect.loglevel,
      secret: opts.connect.secret,
      transport: opts.connect.transport,
      address: opts.connect.address,
      port: opts.connect.port,
      origin: opts.client,
      onAssign: client.onAssign,
      onConnect: client.onConnect,
      onReconnect: client.onReconnect,
      onDisconnect: client.onDisconnect
    }, callback);
  }
};
