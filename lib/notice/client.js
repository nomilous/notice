// Generated by CoffeeScript 1.6.3
var connector, createClient, notifier;

connector = require('./connector');

notifier = require('./notifier');

createClient = function(title, opts) {
  var notice;
  notice = notifier.create(title);
  return {
    onConnect: function(uplink, callback) {
      var event, _fn, _i, _len, _ref;
      notice.first = function(msg, next) {
        msg.direction = 'out';
        return next();
      };
      notice.last = function(msg, next) {
        var type;
        if (msg.direction === 'out') {
          type = msg.context.type;
          uplink.emit(type, msg.context, msg);
        }
        return next();
      };
      _ref = ['info', 'event'];
      _fn = function(event) {
        return uplink.on(event, function(context, msg) {
          var tenor;
          msg.direction = 'in';
          msg.origin = context.origin;
          title = context.title;
          tenor = context.tenor;
          return notice[event][tenor](title, msg);
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _fn(event);
      }
      return callback(null, notice);
    },
    onReconnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('reconnect');
    },
    onDisconnect: function(_arg) {
      var socket;
      socket = _arg.socket;
      return notice.event('disconnect');
    }
  };
};

module.exports = {
  connect: function(title, opts, callback) {
    var client;
    client = createClient(title, opts);
    return connector.connect({
      loglevel: opts.connect.loglevel,
      secret: opts.connect.secret,
      transport: opts.connect.transport,
      address: opts.connect.address,
      port: opts.connect.port,
      onReconnect: client.onReconnect,
      onDisconnect: client.onDisconnect
    }, function(error, uplink) {
      if (error != null) {
        return callback(error);
      }
      return client.onConnect(uplink, callback);
    });
  }
};
