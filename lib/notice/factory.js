// Generated by CoffeeScript 1.4.0
var Defer, Factory, Message, asResolver, isMiddleWare, pipeline;

pipeline = require('when/pipeline');

Defer = require('when').defer;

Message = require('./message');

isMiddleWare = require('./decorators').isMiddleware;

asResolver = require('./decorators').asResolver;

module.exports = Factory = {
  create: function(origin) {
    var middleware, notifier;
    if (typeof origin !== 'string') {
      throw new Error('Factory.create( origin ) require message origin as string');
    }
    middleware = [];
    notifier = function(title, description, type, tenor) {
      var exit, fn, functions, message;
      message = new Message;
      exit = Defer();
      message.title = title;
      message.description = description;
      message.origin = origin;
      message.type = type;
      message.tenor = tenor;
      functions = [];
      return pipeline((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = middleware.length; _i < _len; _i++) {
          fn = middleware[_i];
          functions.unshift(fn);
          _results.push(function() {
            return functions.pop()(message);
          });
        }
        return _results;
      })()).then(function() {
        return exit.resolve(message);
      }, function() {
        return exit.reject.apply(null, arguments);
      }, function() {
        return exit.notify.apply(null, arguments);
      });
      return exit.promise;
    };
    return {
      use: isMiddleWare(asResolver(function(fn) {
        return middleware.push(fn);
      })),
      info: {
        good: function(title, description) {
          return notifier(title, description, 'info', 'good');
        },
        normal: function(title, description) {
          return notifier(title, description, 'info', 'normal');
        },
        bad: function(title, description) {
          return notifier(title, description, 'info', 'bad');
        }
      }
    };
  }
};
