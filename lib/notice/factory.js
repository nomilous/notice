// Generated by CoffeeScript 1.4.0
var Message, NotifierFactory, asResolver, isMiddleWare, pipeline;

pipeline = require('when/pipeline');

Message = require('./message');

isMiddleWare = require('./decorators').isMiddleware;

asResolver = require('./decorators').asResolver;

module.exports = NotifierFactory = (function() {

  function NotifierFactory(moo) {
    this.moo = moo;
    this.middleware = [];
  }

  NotifierFactory.prototype.create = function(config, callback) {
    var notifier,
      _this = this;
    config || (config = {});
    if (typeof config.messenger !== 'function') {
      throw new Error("" + this.constructor.name + " requires config.messenger");
    }
    notifier = function() {
      var fn, functions, message;
      message = new Message;
      message.label = arguments[0];
      message.description = arguments[1];
      if (!(_this.middleware.length > 0)) {
        return config.messenger(message);
      }
      functions = [];
      return pipeline((function() {
        var _i, _len, _ref, _results;
        _ref = this.middleware;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fn = _ref[_i];
          functions.unshift(fn);
          _results.push(function() {
            return functions.pop()(message);
          });
        }
        return _results;
      }).call(_this)).then(function() {
        return config.messenger(message);
      }, function(error) {
        return console.log("\nERROR IN MESSENGER MIDDLEWARE\n-----------------------------\n\n            um?\n\n   should probably protect \n         from this\n\n  MESSAGE WILL NOT BE SENT                                \n", error.stack, '\n');
      });
    };
    notifier.use = isMiddleWare(asResolver(function(middleware) {
      return _this.middleware.push(middleware);
    }));
    return callback(null, notifier);
  };

  return NotifierFactory;

})();
