#! /usr/bin/env coffee

notice = require '../../lib/notice'

MessageHub = notice.hub

    manager: 
        listen: 
            port: 30303
            cert: __dirname + '/../../cert/develop-cert.pem'
            key:  __dirname + '/../../cert/develop-key.pem'
        authenticate: 
            username: 'nomilous'
            password: 'âˆ†'
        # authenticate: (username, password, callback) -> 
        #     callback null, true


MessageHub.create 'hub 1 name', {

    uuid: 1

    listen: 
        
        adaptor: 'socket.io'
        # server:  existingHttpServer
        # address: '0.0.0.0'
        port:    10101
        secret:  'right'
        cert:    __dirname + '/../../cert/develop-cert.pem'
        key:     __dirname + '/../../cert/develop-key.pem'

} , (err, hub) -> 

    return process.stdout.write err.toString() if err?

    seq = 0

    hub.use

        #
        # register middleware (title is required)
        #

        title: 'first middleware'
        (next, capsule, traversal) -> 

            
            capsule.seq = seq++

            if capsule._type == 'control'

                console.log "[#{capsule.control}]", 
                    traversal.origin.title
                    hostname: traversal.origin.context.hostname
                    pid: traversal.origin.context.pid

                return next()


            # console.log """
            # \n
            # RECEIVED::
            #     from: #{traversal.origin.title} (#{traversal.origin.context.pid}.#{traversal.origin.context.hostname})
            #     socketUptime: #{ (Date.now() - traversal.origin.connection.stateAt) / 1000} seconds
            # CAPSULE:
            #     type: #{capsule._type}
            #     uuid: #{capsule._uuid}
            #     content: """, capsule


            # setTimeout (->

            #     #
            #     # swap this middleware in 2 seconds
            #     #

            #     hub.force

            #         title: 'first middleware'
            #         (next, capsule, {origin}) -> 

            #             #console.log 'replaced...'
            #             next()

            # ), 2000


            next()

    hub.use title: 'slow middleware', (next, capsule, {origin}) -> 
        time = Math.random() * 10000
        console.log "#{capsule.seq} #{time}"
        setTimeout next, time

    hub.use title: 'show done', (next, capsule, {origin}) ->
        console.log "#{capsule.seq} done"
        next()

MessageHub.create 'hub 2 name', {

    listen: 
        
        adaptor: 'socket.io'
        # server:  existingHttpServer
        # address: '0.0.0.0'
        port:    20202
        secret:  'right'
        cert:    __dirname + '/../../cert/develop-cert.pem'
        key:     __dirname + '/../../cert/develop-key.pem'

} , (err, hub) -> 

    hub.use title: 'only 1', ->

