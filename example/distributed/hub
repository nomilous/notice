#! /usr/bin/env coffee

notice = require '../../lib/notice'

MessageHub = notice.hub

    manager: 
        listen: 
            port: 30303
            cert: __dirname + '/../../cert/develop-cert.pem'
            key:  __dirname + '/../../cert/develop-key.pem'
        authenticate: 
            username: 'nomilous'
            password: 'âˆ†'
        # authenticate: (username, password, callback) -> 
        #     callback null, true


MessageHub.create 'hub 1 name', {

    uuid: 1

    listen: 
        
        adaptor: 'socket.io'
        # server:  existingHttpServer
        # address: '0.0.0.0'
        port:    10101
        secret:  'right'
        cert:    __dirname + '/../../cert/develop-cert.pem'
        key:     __dirname + '/../../cert/develop-key.pem'

} , (err, hub) -> 

    return process.stdout.write err.toString() if err?

    seq = 0

    hub.use

        #
        # register middleware (title is required)
        #

        title: 'middleware 1'
        (next, capsule, traversal) -> 

            if capsule._type == 'control'
                console.log "[#{capsule.control}]", 
                    traversal.origin.title
                    hostname: traversal.origin.context.hostname
                    pid: traversal.origin.context.pid
                return next()


            capsule.seq = seq++
            next()

    hub.use( 
        title: 'middleware ' + i
        (next, capsule, {origin}) -> next() 

    ) for i in [2..3] 


    # hub.use title: 'middleware 02', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 03', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 04', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 05', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 06', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 07', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 08', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 09', (next, capsule, {origin}) -> next()
    # hub.use title: 'middleware 10', (next, capsule, {origin}) -> next()

MessageHub.create 'hub 2 name', {

    listen: 
        
        adaptor: 'socket.io'
        # server:  existingHttpServer
        # address: '0.0.0.0'
        port:    20202
        secret:  'right'
        cert:    __dirname + '/../../cert/develop-cert.pem'
        key:     __dirname + '/../../cert/develop-key.pem'

} , (err, hub) -> 

    hub.use title: 'only 1', ->

