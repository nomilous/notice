#! /usr/bin/env coffee

notice = require '../../lib/notice'

MessageHub = notice.hub
    
    error:
        keep: 2
    manager: 
        listen: 
            port: 44444
            cert: __dirname + '/../../cert/develop-cert.pem'
            key:  __dirname + '/../../cert/develop-key.pem'
        authenticate: 
            username: 'username'
            password: 'password'

MessageHub.create

    title: 'Purchases Processor'
    uuid:  1

    cache: 

        #
        # hotswapped middleware has only a local scope
        # --------------------------------------------
        # 
        # * this cache in all middleware calls to alleviate that problem
        # * also, it can be retreived via the REST api 
        # 
        #         GET /v1/hubs/:uuid:/cache
        # 
        # * [PENDING], it can be modified via the REST api
        # 
        #         POST /v1/hubs/:uuid:/cache/:key:
        #         DELETE /v1/hubs/:uuid:/cache/:key:
        # 

        purchases: 0

    listen: 
        adaptor: 'socket.io'
        port:    11111
        secret:  'secret'
        cert:    __dirname + '/../../cert/develop-cert.pem'
        key:     __dirname + '/../../cert/develop-key.pem'

    (error, hub) -> 

        return process.stdout.write error.toString() if error?

        hub.use 
            title: 'initialize'
            (next, capsule, traversal) ->

                {cache, origin} = traversal

                if capsule.control?
                    console.log capsule.control, origin.context.account
                    return next.cancel()

                return next() unless capsule.purchase?

                cache.purchases ||= 0
                if cache.purchases == 0
                    console.log cache.purchases, 'purchases'
                    
                cache.purchases++
                if cache.purchases % 20 == 0
                    console.log cache.purchases, 'purchases'

                #
                # sprinkle in some errors and cancellations
                # and a random lag to cause an inprocess accumulation
                #

                throw new Error 'darn' if Math.random() < 0.05
                next.cancel() if Math.random() < 0.05

        hub.use 
            title: 'warehouse'
            (next, capsule, {cache}) -> 

                return next() unless capsule.purchase?
                next()

        hub.use 
            title: 'accounts'
            (next, capsule, traversal) -> 

                return next() unless capsule.purchase?
                next()

        hub.use 
            title: 'despatch'
            (next, capsule, traversal) -> 

                return next() unless capsule.purchase?
                next()

        hub.use
            title: 'finalize', 
            (next, casule, traversal) -> 
                next()


