#! /usr/bin/env coffee

notice = require '../../lib/notice'

MessageHub = notice.hub
    api: 
        listen: port: 5555
        authenticate: username: 'user', password: ''

    root: routes = 
        
        clients: ({root}, callback) -> callback null, root.hubContext.clients
        
        #
        # curl -u user: :5555/clients
        # curl -u user: :5555/clients/Y-YN02Nh7Od0j5oVITRB/connection
        # 
        # {
        #   "Y-YN02Nh7Od0j5oVITRB": {
        #     "title": "Arm",
        #     "context": {
        #       "hostname": "***********.local",
        #       "pid": 20917
        #     },
        #     "hub": "Remote Pipeline",
        #     "connection": {
        #       "state": "connected",
        #       "stateAt": "2013-10-29T21:31:51.224Z"
        #     }
        #   }
        # }
        # 
        # TODO: consider client UUID insted of socketio id in clients hash
        # 



routes.clients.$notice = {} 
    
MessageHub.create

    title: 'Proxy Pipeline'
    uuid:  1

    listen: 
        adaptor:   'socket.io'
        port:      12121
        secret:    'secret'

    #ticks: 
    #    #
    #    # dequeue ticks
    #    # 
    #    # lifo: interval: 100
    #    fifo: interval: 100
    #        #
    #        # TODO: got some scheduler issues under heavy loading
    #        #       is anything can be done? (using setInterval)
    #        # 
    #        #       pipeline uses 3 nextTick calls 
    #        #       (that might not be necessary)
    #        # 


    (err, proxy) -> 

        return process.stdout.write err.toString() if err?

        #
        # watch -n 1 curl -su user: :5555/hubs/1/stats/pipeline
        # 

        proxy.use 
            title: 'Object1 Router'
            (next, capsule, traversal) -> 

                #
                # destination online? / queue somewhere (?redis)
                #

                return next() unless capsule.Object1?
                #console.log Object1: capsule
                next()


        proxy.use 
            title: 'Object1 Dequeue'
            (next, capsule, traversal) -> 

                #
                # destination online? / queue somewhere (?redis)
                #

                return next() unless capsule.$tick is 'fifo'
                console.log FIFO: capsule
                next()


        proxy.use 
            title: 'Object2 Router'
            (next, capsule, traversal) -> 

                return next() unless capsule.Object2?
                #console.log Object2: capsule
                next()




