#! /usr/bin/env coffee

require './lib/app_component_one'
require './lib/app_component_two'

{bus1, bus2} = require './lib/message_bus'

bus1.event 'start', interval: 1000
bus2.use (done, msg) -> 

    #
    # register middleware on message bus 2
    # ------------------------------------
    # 
    # * Middlewares are run in the sequence they were registered.
    # 
    # * Throws or uncaught Exceptions will terminate the sequence
    #   and the error is passed to the callback/promise at the
    #   message creator.
    # 

    if msg.progress == '1 of 2'
        msg.state = 'failed'
        throw new Error 'oh dear...' 

    # 
    # * Middlewares can ammend the message and the final result
    #   is passed to the callback/promise at the message creator.
    # 

    msg.ok = true + true
    console.log 'on bus2:', JSON.stringify msg, null, 2
    msg.state = 'done'

    # 
    # * Messages do not proceed to the next middleware until done()
    #   is called. This allows the middleware to perform an asynchronous 
    #   activity of some kind (eg. www/DB/wait ) and keep the message 
    #   on hold while doing so.
    # 

    done()

    #
    # * Never calling done() is a PROBLEM if the message creator is 
    #   expecting a final result.
    # 
    

setTimeout (-> bus1.event 'stop' ), 2020
